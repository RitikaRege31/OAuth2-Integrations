{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\GitHub\\\\VectorShift-assignment\\\\frontend\\\\src\\\\integrations\\\\hubspot.js\",\n  _s = $RefreshSig$();\n// import axios from \"axios\";\n\n// const BASE_URL = \"http://localhost:8000/integrations/hubspot\";\n\n// export const authorizeHubSpot = async (userId, orgId) => {\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:8000/integrations/hubspot/authorize\",\n//         new URLSearchParams({\n//           user_id: userId,\n//           org_id: orgId,\n//         })\n//       );\n//       window.location.href = response.data.url;\n//     } catch (error) {\n//       console.error(\"Error during HubSpot authorization:\", error);\n//     }\n//   };\n\n// export const getHubSpotItems = async (userId, orgId) => {\n//   try {\n//     const response = await axios.get(`${BASE_URL}/items`, {\n//       params: { user_id: userId, org_id: orgId },\n//     });\n//     return response.data.items;\n//   } catch (error) {\n//     console.error(\"Error fetching HubSpot items:\", error);\n//     return [];\n//   }\n// };\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const BASE_URL = \"http://localhost:8000/integrations/hubspot\";\n\n// // Function to handle HubSpot authorization\n// export const authorizeHubSpot = async (userId, orgId) => {\n//   try {\n//     const response = await axios.post(\n//       `${BASE_URL}/authorize`,\n//       new URLSearchParams({\n//         user_id: userId,\n//         org_id: orgId,\n//       })\n//     );\n//     window.location.href = response.data.url;\n//   } catch (error) {\n//     console.error(\"Error during HubSpot authorization:\", error);\n//   }\n// };\n\n// // Function to fetch HubSpot items\n// export const getHubSpotItems = async (userId, orgId) => {\n//   try {\n//     const response = await axios.get(`${BASE_URL}/items`, {\n//       params: { user_id: userId, org_id: orgId },\n//     });\n//     return response.data.items;\n//   } catch (error) {\n//     console.error(\"Error fetching HubSpot items:\", error);\n//     return [];\n//   }\n// };\n\n// // HubSpot OAuth Integration Component\n// const HubSpotAuth = () => {\n//   const [authUrl, setAuthUrl] = useState('');\n//   const [tokens, setTokens] = useState(null);\n//   const [userId, setUserId] = useState('');\n\n//   // Update with your actual HubSpot OAuth credentials\n//   const HUBSPOT_CLIENT_ID = '0252423f-9a2d-4434-b622-3b2129f9c46d';\n//   const HUBSPOT_REDIRECT_URI = 'http://localhost:8000/integrations/hubspot/oauth2callback';\n\n//   // Updated authorization URL with the required scope\n// //   const authorization_url = (\n// //     `https://app.hubspot.com/oauth/authorize?` +\n// //     `client_id=${HUBSPOT_CLIENT_ID}&redirect_uri=${HUBSPOT_REDIRECT_URI}&` +\n// //     `scope=crm.objects.contacts.read%20crm.objects.contacts.write`\n// //   );\n// const authorization_url = (\n//     `https://app.hubspot.com/oauth/authorize?client_id=0252423f-9a2d-4434-b622-3b2129f9c46d&redirect_uri=http://localhost:8000/integrations/hubspot/oauth2callback&scope=crm.objects.contacts.write%20oauth%20crm.objects.companies.write%20crm.lists.write%20crm.objects.companies.read%20crm.lists.read%20crm.objects.contacts.&state={user_id}` \n// );\n\n//   const REDIS_BACKEND_URL = 'http://localhost:8000'; // Change to your backend URL\n\n//   // Step 1: Get HubSpot OAuth authorization URL\n//   const getAuthUrl = () => {\n//     setAuthUrl(authorization_url);\n//   };\n\n//   // Step 2: Handle OAuth callback and exchange code for tokens\n//   const handleOAuthCallback = async (code) => {\n//     try {\n//       // Call your backend API to exchange the code for tokens\n//       const response = await axios.get(`${REDIS_BACKEND_URL}/oauth2callback?code=${code}&user_id=${userId}`);\n//       const tokens = response.data.tokens;\n\n//       // Save tokens to the state\n//       setTokens(tokens);\n\n//       // Store tokens in the backend (Redis)\n//       await saveTokens(userId, tokens);\n\n//       alert('OAuth successful, tokens saved!');\n//     } catch (error) {\n//       console.error('Error during OAuth callback:', error);\n//       alert('Error during OAuth callback!');\n//     }\n//   };\n\n//   // Step 3: Save tokens to the backend (Redis)\n//   const saveTokens = async (userId, tokens) => {\n//     try {\n//       await axios.post(`${REDIS_BACKEND_URL}/save_tokens`, {\n//         user_id: userId,\n//         tokens: tokens,\n//       });\n//       alert('Tokens saved successfully in Redis!');\n//     } catch (error) {\n//       console.error('Error saving tokens:', error);\n//       alert('Error saving tokens!');\n//     }\n//   };\n\n//   // Step 4: Retrieve tokens from the backend (Redis)\n//   const retrieveTokens = async () => {\n//     try {\n//       const response = await axios.get(`${REDIS_BACKEND_URL}/get_tokens?user_id=${userId}`);\n//       setTokens(response.data.tokens);\n//       alert('Tokens retrieved from Redis!');\n//     } catch (error) {\n//       console.error('Error retrieving tokens:', error);\n//       alert('Error retrieving tokens!');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>HubSpot OAuth Integration</h1>\n\n//       {/* Button to get OAuth URL */}\n//       <button onClick={getAuthUrl}>Get OAuth URL</button>\n//       {authUrl && (\n//         <div>\n//           <p>\n//             Click <a href={authUrl} target=\"_blank\" rel=\"noopener noreferrer\">here</a> to authorize your HubSpot account.\n//           </p>\n//         </div>\n//       )}\n\n//       {/* Input field for user ID (for saving/retrieving tokens) */}\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter User ID\"\n//         value={userId}\n//         onChange={(e) => setUserId(e.target.value)}\n//       />\n\n//       {/* Button to retrieve tokens */}\n//       <button onClick={retrieveTokens}>Retrieve Tokens</button>\n\n//       {/* Display retrieved tokens */}\n//       {tokens && (\n//         <div>\n//           <h3>Tokens:</h3>\n//           <pre>{JSON.stringify(tokens, null, 2)}</pre>\n//         </div>\n//       )}\n\n//       {/* OAuth callback simulation */}\n//       {/* Ideally, the callback will happen automatically when the user is redirected after authorization */}\n//       {/* For now, this button will simulate the OAuth callback with a mock authorization code */}\n//       <button onClick={() => handleOAuthCallback('mockAuthCode123')}>Simulate OAuth Callback</button>\n//     </div>\n//   );\n// };\n\n// export default HubSpotAuth;\n\nimport { useState, useEffect } from 'react';\nimport { Box, Button, CircularProgress } from '@mui/material';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const HubSpotAuth = ({\n  user,\n  org,\n  integrationParams,\n  setIntegrationParams\n}) => {\n  _s();\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  // Function to open OAuth in a new window\n  const handleConnectClick = async () => {\n    try {\n      setIsConnecting(true);\n      const formData = new FormData();\n      formData.append('user_id', user);\n      formData.append('org_id', org);\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\n      console.log(response);\n      const authURL = response === null || response === void 0 ? void 0 : response.data;\n      const newWindow = window.open(authURL, 'Hubspot Authorization', 'width=600, height=600');\n\n      // Polling for the window to close\n      const pollTimer = window.setInterval(() => {\n        if ((newWindow === null || newWindow === void 0 ? void 0 : newWindow.closed) !== false) {\n          window.clearInterval(pollTimer);\n          handleWindowClosed();\n        }\n      }, 200);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.detail);\n    }\n  };\n\n  // Function to handle logic when the OAuth window closes\n  const handleWindowClosed = async () => {\n    try {\n      const formData = new FormData();\n      formData.append('user_id', user);\n      formData.append('org_id', org);\n      const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\n      const credentials = response.data;\n      if (credentials) {\n        setIsConnecting(false);\n        setIsConnected(true);\n        setIntegrationParams(prev => ({\n          ...prev,\n          credentials: credentials,\n          type: 'Hubspot'\n        }));\n      }\n      setIsConnecting(false);\n    } catch (e) {\n      var _e$response2, _e$response2$data;\n      setIsConnecting(false);\n      alert(e === null || e === void 0 ? void 0 : (_e$response2 = e.response) === null || _e$response2 === void 0 ? void 0 : (_e$response2$data = _e$response2.data) === null || _e$response2$data === void 0 ? void 0 : _e$response2$data.detail);\n    }\n  };\n  useEffect(() => {\n    setIsConnected(integrationParams !== null && integrationParams !== void 0 && integrationParams.credentials ? true : false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 2\n      },\n      children: [\"Parameters\", /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        sx: {\n          mt: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: isConnected ? () => {} : handleConnectClick,\n          color: isConnected ? 'success' : 'primary',\n          disabled: isConnecting,\n          style: {\n            pointerEvents: isConnected ? 'none' : 'auto',\n            cursor: isConnected ? 'default' : 'pointer',\n            opacity: isConnected ? 1 : undefined\n          },\n          children: isConnected ? 'Hubspot Connected' : isConnecting ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 73\n          }, this) : 'Connect to Hubspot'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(HubSpotAuth, \"YVzh0k4rAm9dKRmEfKk5oscD40o=\");\n_c = HubSpotAuth;\nvar _c;\n$RefreshReg$(_c, \"HubSpotAuth\");","map":{"version":3,"names":["useState","useEffect","Box","Button","CircularProgress","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","HubSpotAuth","user","org","integrationParams","setIntegrationParams","_s","isConnected","setIsConnected","isConnecting","setIsConnecting","handleConnectClick","formData","FormData","append","response","post","console","log","authURL","data","newWindow","window","open","pollTimer","setInterval","closed","clearInterval","handleWindowClosed","e","_e$response","_e$response$data","alert","detail","credentials","prev","type","_e$response2","_e$response2$data","children","sx","mt","display","alignItems","justifyContent","variant","onClick","color","disabled","style","pointerEvents","cursor","opacity","undefined","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/GitHub/VectorShift-assignment/frontend/src/integrations/hubspot.js"],"sourcesContent":["// import axios from \"axios\";\r\n\r\n// const BASE_URL = \"http://localhost:8000/integrations/hubspot\";\r\n\r\n// export const authorizeHubSpot = async (userId, orgId) => {\r\n//     try {\r\n//       const response = await axios.post(\r\n//         \"http://localhost:8000/integrations/hubspot/authorize\",\r\n//         new URLSearchParams({\r\n//           user_id: userId,\r\n//           org_id: orgId,\r\n//         })\r\n//       );\r\n//       window.location.href = response.data.url;\r\n//     } catch (error) {\r\n//       console.error(\"Error during HubSpot authorization:\", error);\r\n//     }\r\n//   };\r\n  \r\n\r\n// export const getHubSpotItems = async (userId, orgId) => {\r\n//   try {\r\n//     const response = await axios.get(`${BASE_URL}/items`, {\r\n//       params: { user_id: userId, org_id: orgId },\r\n//     });\r\n//     return response.data.items;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching HubSpot items:\", error);\r\n//     return [];\r\n//   }\r\n// };\r\n// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const BASE_URL = \"http://localhost:8000/integrations/hubspot\";\r\n\r\n// // Function to handle HubSpot authorization\r\n// export const authorizeHubSpot = async (userId, orgId) => {\r\n//   try {\r\n//     const response = await axios.post(\r\n//       `${BASE_URL}/authorize`,\r\n//       new URLSearchParams({\r\n//         user_id: userId,\r\n//         org_id: orgId,\r\n//       })\r\n//     );\r\n//     window.location.href = response.data.url;\r\n//   } catch (error) {\r\n//     console.error(\"Error during HubSpot authorization:\", error);\r\n//   }\r\n// };\r\n\r\n// // Function to fetch HubSpot items\r\n// export const getHubSpotItems = async (userId, orgId) => {\r\n//   try {\r\n//     const response = await axios.get(`${BASE_URL}/items`, {\r\n//       params: { user_id: userId, org_id: orgId },\r\n//     });\r\n//     return response.data.items;\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching HubSpot items:\", error);\r\n//     return [];\r\n//   }\r\n// };\r\n\r\n// // HubSpot OAuth Integration Component\r\n// const HubSpotAuth = () => {\r\n//   const [authUrl, setAuthUrl] = useState('');\r\n//   const [tokens, setTokens] = useState(null);\r\n//   const [userId, setUserId] = useState('');\r\n\r\n//   // Update with your actual HubSpot OAuth credentials\r\n//   const HUBSPOT_CLIENT_ID = '0252423f-9a2d-4434-b622-3b2129f9c46d';\r\n//   const HUBSPOT_REDIRECT_URI = 'http://localhost:8000/integrations/hubspot/oauth2callback';\r\n\r\n//   // Updated authorization URL with the required scope\r\n// //   const authorization_url = (\r\n// //     `https://app.hubspot.com/oauth/authorize?` +\r\n// //     `client_id=${HUBSPOT_CLIENT_ID}&redirect_uri=${HUBSPOT_REDIRECT_URI}&` +\r\n// //     `scope=crm.objects.contacts.read%20crm.objects.contacts.write`\r\n// //   );\r\n// const authorization_url = (\r\n//     `https://app.hubspot.com/oauth/authorize?client_id=0252423f-9a2d-4434-b622-3b2129f9c46d&redirect_uri=http://localhost:8000/integrations/hubspot/oauth2callback&scope=crm.objects.contacts.write%20oauth%20crm.objects.companies.write%20crm.lists.write%20crm.objects.companies.read%20crm.lists.read%20crm.objects.contacts.&state={user_id}` \r\n// );\r\n  \r\n\r\n//   const REDIS_BACKEND_URL = 'http://localhost:8000'; // Change to your backend URL\r\n\r\n//   // Step 1: Get HubSpot OAuth authorization URL\r\n//   const getAuthUrl = () => {\r\n//     setAuthUrl(authorization_url);\r\n//   };\r\n\r\n//   // Step 2: Handle OAuth callback and exchange code for tokens\r\n//   const handleOAuthCallback = async (code) => {\r\n//     try {\r\n//       // Call your backend API to exchange the code for tokens\r\n//       const response = await axios.get(`${REDIS_BACKEND_URL}/oauth2callback?code=${code}&user_id=${userId}`);\r\n//       const tokens = response.data.tokens;\r\n\r\n//       // Save tokens to the state\r\n//       setTokens(tokens);\r\n\r\n//       // Store tokens in the backend (Redis)\r\n//       await saveTokens(userId, tokens);\r\n\r\n//       alert('OAuth successful, tokens saved!');\r\n//     } catch (error) {\r\n//       console.error('Error during OAuth callback:', error);\r\n//       alert('Error during OAuth callback!');\r\n//     }\r\n//   };\r\n\r\n//   // Step 3: Save tokens to the backend (Redis)\r\n//   const saveTokens = async (userId, tokens) => {\r\n//     try {\r\n//       await axios.post(`${REDIS_BACKEND_URL}/save_tokens`, {\r\n//         user_id: userId,\r\n//         tokens: tokens,\r\n//       });\r\n//       alert('Tokens saved successfully in Redis!');\r\n//     } catch (error) {\r\n//       console.error('Error saving tokens:', error);\r\n//       alert('Error saving tokens!');\r\n//     }\r\n//   };\r\n\r\n//   // Step 4: Retrieve tokens from the backend (Redis)\r\n//   const retrieveTokens = async () => {\r\n//     try {\r\n//       const response = await axios.get(`${REDIS_BACKEND_URL}/get_tokens?user_id=${userId}`);\r\n//       setTokens(response.data.tokens);\r\n//       alert('Tokens retrieved from Redis!');\r\n//     } catch (error) {\r\n//       console.error('Error retrieving tokens:', error);\r\n//       alert('Error retrieving tokens!');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>HubSpot OAuth Integration</h1>\r\n\r\n//       {/* Button to get OAuth URL */}\r\n//       <button onClick={getAuthUrl}>Get OAuth URL</button>\r\n//       {authUrl && (\r\n//         <div>\r\n//           <p>\r\n//             Click <a href={authUrl} target=\"_blank\" rel=\"noopener noreferrer\">here</a> to authorize your HubSpot account.\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* Input field for user ID (for saving/retrieving tokens) */}\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Enter User ID\"\r\n//         value={userId}\r\n//         onChange={(e) => setUserId(e.target.value)}\r\n//       />\r\n\r\n//       {/* Button to retrieve tokens */}\r\n//       <button onClick={retrieveTokens}>Retrieve Tokens</button>\r\n\r\n//       {/* Display retrieved tokens */}\r\n//       {tokens && (\r\n//         <div>\r\n//           <h3>Tokens:</h3>\r\n//           <pre>{JSON.stringify(tokens, null, 2)}</pre>\r\n//         </div>\r\n//       )}\r\n\r\n//       {/* OAuth callback simulation */}\r\n//       {/* Ideally, the callback will happen automatically when the user is redirected after authorization */}\r\n//       {/* For now, this button will simulate the OAuth callback with a mock authorization code */}\r\n//       <button onClick={() => handleOAuthCallback('mockAuthCode123')}>Simulate OAuth Callback</button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default HubSpotAuth;\r\n\r\n\r\n\r\n\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport {\r\n    Box,\r\n    Button,\r\n    CircularProgress\r\n} from '@mui/material';\r\nimport axios from 'axios';\r\n\r\nexport const HubSpotAuth = ({ user, org, integrationParams, setIntegrationParams }) => {\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n\r\n    // Function to open OAuth in a new window\r\n    const handleConnectClick = async () => {\r\n        try {\r\n            setIsConnecting(true);\r\n            const formData = new FormData();\r\n            formData.append('user_id', user);\r\n            formData.append('org_id', org);\r\n            const response = await axios.post(`http://localhost:8000/integrations/hubspot/authorize`, formData);\r\n            console.log(response);\r\n            const authURL = response?.data;\r\n\r\n            const newWindow = window.open(authURL, 'Hubspot Authorization', 'width=600, height=600');\r\n\r\n            // Polling for the window to close\r\n            const pollTimer = window.setInterval(() => {\r\n                if (newWindow?.closed !== false) { \r\n                    window.clearInterval(pollTimer);\r\n                    handleWindowClosed();\r\n                }\r\n            }, 200);\r\n        } catch (e) {\r\n            setIsConnecting(false);\r\n            alert(e?.response?.data?.detail);\r\n        }\r\n    }\r\n\r\n    // Function to handle logic when the OAuth window closes\r\n    const handleWindowClosed = async () => {\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append('user_id', user);\r\n            formData.append('org_id', org);\r\n            const response = await axios.post(`http://localhost:8000/integrations/hubspot/credentials`, formData);\r\n            const credentials = response.data; \r\n            if (credentials) {\r\n                setIsConnecting(false);\r\n                setIsConnected(true);\r\n                setIntegrationParams(prev => ({ ...prev, credentials: credentials, type: 'Hubspot' }));\r\n            }\r\n            setIsConnecting(false);\r\n        } catch (e) {\r\n            setIsConnecting(false);\r\n            alert(e?.response?.data?.detail);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsConnected(integrationParams?.credentials ? true : false)\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n        <Box sx={{mt: 2}}>\r\n            Parameters\r\n            <Box display='flex' alignItems='center' justifyContent='center' sx={{mt: 2}}>\r\n                <Button \r\n                    variant='contained' \r\n                    onClick={isConnected ? () => {} :handleConnectClick}\r\n                    color={isConnected ? 'success' : 'primary'}\r\n                    disabled={isConnecting}\r\n                    style={{\r\n                        pointerEvents: isConnected ? 'none' : 'auto',\r\n                        cursor: isConnected ? 'default' : 'pointer',\r\n                        opacity: isConnected ? 1 : undefined\r\n                    }}\r\n                >\r\n                    {isConnected ? 'Hubspot Connected' : isConnecting ? <CircularProgress size={20} /> : 'Connect to Hubspot'}\r\n                </Button>\r\n            </Box>\r\n        </Box>\r\n      </>\r\n    );\r\n}\r\n"],"mappings":";;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAMA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SACIC,GAAG,EACHC,MAAM,EACNC,gBAAgB,QACb,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,OAAO,MAAMC,WAAW,GAAGA,CAAC;EAAEC,IAAI;EAAEC,GAAG;EAAEC,iBAAiB;EAAEC;AAAqB,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,YAAY,EAAEC,eAAe,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}