{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = \"http://localhost:8000/api/hubspot\";\nconst HUBSPOT_CLIENT_ID = process.env.HUBSPOT_CLIENT_ID;\nconst HUBSPOT_REDIRECT_URI = process.env.HUBSPOT_REDIRECT_URI;\n\n// export const authorizeHubSpot = async (userId, orgId) => {\n//   try {\n//     const response = await axios.get(`${BASE_URL}/authorize`, {\n//       params: { user_id: userId, org_id: orgId },\n//     });\n//     window.location.href = response.data.url;\n//   } catch (error) {\n//     console.error(\"Error during HubSpot authorization:\", error);\n//   }\n// };\n// export const authorizeHubSpot = async (userId, orgId) => {\n//     try {\n//       const url = `https://app.hubspot.com/oauth/authorize?client_id=${HUBSPOT_CLIENT_ID}&redirect_uri=${HUBSPOT_REDIRECT_URI}&scope=contacts`;\n\n//       // Send a response to frontend with the HubSpot authorization URL\n//       return url;  // This will send the URL to the frontend\n//     } catch (error) {\n//       console.error(\"Error during HubSpot authorization:\", error);\n//       throw new Error(\"Authorization failed\");\n//     }\n//   };\n// export const authorizeHubSpot = async (userId, orgId) => {\n//     try {\n//       const response = await axios.post(`${BASE_URL}/integrations/hubspot/authorize`, { userId, orgId });\n\n//       // Perform the actual redirection to HubSpot\n//       window.location.href = response.data.url;  // Redirect the user to the HubSpot authorization URL\n//     } catch (error) {\n//       console.error(\"Error during HubSpot authorization:\", error);\n//       throw new Error(\"Authorization failed\");\n//     }\n//   };\nexport const authorizeHubSpot = async (userId, orgId) => {\n  try {\n    var _response$data;\n    // Send the request to the backend to get the HubSpot authorization URL\n    const response = await axios.get(`${BASE_URL}/integrations/hubspot/authorize`, {\n      userId,\n      orgId\n    });\n    if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.url) {\n      // Perform the actual redirection to HubSpot\n      window.location.href = response.data.url;\n    } else {\n      console.error(\"No URL received from backend:\", response);\n      throw new Error(\"No URL received from the backend\");\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    console.error(\"Error during HubSpot authorization:\", error);\n    alert(`Authorization failed: ${(error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || error.message}`);\n  }\n};\nexport const getHubSpotItems = async (userId, orgId) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/items`, {\n      params: {\n        user_id: userId,\n        org_id: orgId\n      }\n    });\n    return response.data.items;\n  } catch (error) {\n    console.error(\"Error fetching HubSpot items:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","HUBSPOT_CLIENT_ID","process","env","HUBSPOT_REDIRECT_URI","authorizeHubSpot","userId","orgId","_response$data","response","get","data","url","window","location","href","console","error","Error","_error$response","_error$response$data","alert","detail","message","getHubSpotItems","params","user_id","org_id","items"],"sources":["C:/Users/DELL/Documents/GitHub/VectorShift-assignment/frontend/src/integrations/hubspot.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:8000/api/hubspot\";\r\nconst HUBSPOT_CLIENT_ID = process.env.HUBSPOT_CLIENT_ID;\r\nconst HUBSPOT_REDIRECT_URI = process.env.HUBSPOT_REDIRECT_URI;\r\n\r\n// export const authorizeHubSpot = async (userId, orgId) => {\r\n//   try {\r\n//     const response = await axios.get(`${BASE_URL}/authorize`, {\r\n//       params: { user_id: userId, org_id: orgId },\r\n//     });\r\n//     window.location.href = response.data.url;\r\n//   } catch (error) {\r\n//     console.error(\"Error during HubSpot authorization:\", error);\r\n//   }\r\n// };\r\n// export const authorizeHubSpot = async (userId, orgId) => {\r\n//     try {\r\n//       const url = `https://app.hubspot.com/oauth/authorize?client_id=${HUBSPOT_CLIENT_ID}&redirect_uri=${HUBSPOT_REDIRECT_URI}&scope=contacts`;\r\n      \r\n//       // Send a response to frontend with the HubSpot authorization URL\r\n//       return url;  // This will send the URL to the frontend\r\n//     } catch (error) {\r\n//       console.error(\"Error during HubSpot authorization:\", error);\r\n//       throw new Error(\"Authorization failed\");\r\n//     }\r\n//   };\r\n// export const authorizeHubSpot = async (userId, orgId) => {\r\n//     try {\r\n//       const response = await axios.post(`${BASE_URL}/integrations/hubspot/authorize`, { userId, orgId });\r\n  \r\n//       // Perform the actual redirection to HubSpot\r\n//       window.location.href = response.data.url;  // Redirect the user to the HubSpot authorization URL\r\n//     } catch (error) {\r\n//       console.error(\"Error during HubSpot authorization:\", error);\r\n//       throw new Error(\"Authorization failed\");\r\n//     }\r\n//   };\r\nexport const authorizeHubSpot = async (userId, orgId) => {\r\n    try {\r\n      // Send the request to the backend to get the HubSpot authorization URL\r\n      const response = await axios.get(`${BASE_URL}/integrations/hubspot/authorize`, { userId, orgId });\r\n  \r\n      if (response?.data?.url) {\r\n        // Perform the actual redirection to HubSpot\r\n        window.location.href = response.data.url;\r\n      } else {\r\n        console.error(\"No URL received from backend:\", response);\r\n        throw new Error(\"No URL received from the backend\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error during HubSpot authorization:\", error);\r\n      alert(`Authorization failed: ${error?.response?.data?.detail || error.message}`);\r\n    }\r\n  };\r\n  \r\n  \r\n\r\nexport const getHubSpotItems = async (userId, orgId) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/items`, {\r\n      params: { user_id: userId, org_id: orgId },\r\n    });\r\n    return response.data.items;\r\n  } catch (error) {\r\n    console.error(\"Error fetching HubSpot items:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,mCAAmC;AACpD,MAAMC,iBAAiB,GAAGC,OAAO,CAACC,GAAG,CAACF,iBAAiB;AACvD,MAAMG,oBAAoB,GAAGF,OAAO,CAACC,GAAG,CAACC,oBAAoB;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,KAAK;EACrD,IAAI;IAAA,IAAAC,cAAA;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,GAAEV,QAAS,iCAAgC,EAAE;MAAEM,MAAM;MAAEC;IAAM,CAAC,CAAC;IAEjG,IAAIE,QAAQ,aAARA,QAAQ,gBAAAD,cAAA,GAARC,QAAQ,CAAEE,IAAI,cAAAH,cAAA,eAAdA,cAAA,CAAgBI,GAAG,EAAE;MACvB;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGN,QAAQ,CAACE,IAAI,CAACC,GAAG;IAC1C,CAAC,MAAM;MACLI,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAER,QAAQ,CAAC;MACxD,MAAM,IAAIS,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF,CAAC,CAAC,OAAOD,KAAK,EAAE;IAAA,IAAAE,eAAA,EAAAC,oBAAA;IACdJ,OAAO,CAACC,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3DI,KAAK,CAAE,yBAAwB,CAAAJ,KAAK,aAALA,KAAK,wBAAAE,eAAA,GAALF,KAAK,CAAER,QAAQ,cAAAU,eAAA,wBAAAC,oBAAA,GAAfD,eAAA,CAAiBR,IAAI,cAAAS,oBAAA,uBAArBA,oBAAA,CAAuBE,MAAM,KAAIL,KAAK,CAACM,OAAQ,EAAC,CAAC;EAClF;AACF,CAAC;AAIH,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAOlB,MAAM,EAAEC,KAAK,KAAK;EACtD,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,GAAEV,QAAS,QAAO,EAAE;MACpDyB,MAAM,EAAE;QAAEC,OAAO,EAAEpB,MAAM;QAAEqB,MAAM,EAAEpB;MAAM;IAC3C,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACE,IAAI,CAACiB,KAAK;EAC5B,CAAC,CAAC,OAAOX,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,EAAE;EACX;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}